events {
    worker_connections 1024;
}

http {
    resolver 127.0.0.11 ipv6=off;

    upstream st2web {
        server st2web:80;
    }
    upstream oauth2_proxy {
        server oauth2_proxy:4180;
    }
    upstream st2auth {
        server st2auth:9100;
    }
    server {
        listen 80 default_server;
        listen [::]:80 default_server;

        location / {
            return 301 https://$host$request_uri;
    }
}

    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name localhost;

        ssl_certificate /etc/nginx/certs/stackstorm.crt;
        ssl_certificate_key /etc/nginx/certs/stackstorm.key;

        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
        ssl_session_tickets off;

        # modern configuration
        ssl_protocols TLSv1.3;
        ssl_prefer_server_ciphers off;

        # HSTS (ngx_http_headers_module is required) (63072000 seconds)
        add_header Strict-Transport-Security "max-age=63072000" always;

        # Auth request configuration
        location /oauth2 {
            proxy_pass http://oauth2_proxy;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
        }

        # Main location block
        location / {
            auth_request /oauth2/auth;
            error_page 401 = /oauth2/sign_in;
            auth_request_set $user $upstream_http_x_auth_request_user;
            auth_request_set $email $upstream_http_x_auth_request_email;

            # If auth_request returns 403, show forbidden page
            error_page 403 = /403.html;
            
            # If the cookie exists, proxy to st2web
            proxy_pass http://st2web;
            proxy_set_header X-Forwarded-User $email;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_pass_request_headers on;

        }

        error_page 403 /403.html;
        location = /403.html {
            internal;
            return 403 '<html><body><h1>403 Forbidden</h1></body></html>';
        }
    }
}
