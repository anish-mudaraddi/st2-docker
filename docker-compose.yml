services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./files/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./files/certs:/etc/nginx/certs:ro
    depends_on:
      - st2web
    networks:
      - public
      - private

  oauth2_proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    command:
      - --http-address
      - 0.0.0.0:4180 
      - --allowed-group
      - stfc-cloud/admins
    environment:
      OAUTH2_PROXY_UPSTREAMS: http://nginx:80
      OAUTH2_REVERSE_PROXY: true
      OAUTH2_PROXY_PROVIDER: oidc 
      OAUTH2_PROXY_OIDC_ISSUER_URL: https://iris-iam.stfc.ac.uk/
      OAUTH2_PROXY_CLIENT_ID: $OAUTH_CLIENT_ID
      OAUTH2_PROXY_CLIENT_SECRET: $OAUTH_CLIENT_SECRET
      OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: true      
      OAUTH2_PROXY_EMAIL_DOMAINS: '*'
      OAUTH2_PROXY_COOKIE_SECRET: $OAUTH_COOKIE_SECRET
      OAUTH2_PROXY_COOKIE_SECURE: false
      OAUTH2_PROXY_REDIRECT_URL: $OAUTH_REDIRECT_URL
      OAUTH2_PROXY_WHITELIST_DOMAINS: "localhost"
      OAUTH2_PROXY_PASS_AUTHORIZATION_HEADER: true
      OAUTH2_PROXY_SET_AUTHORIZATION_HEADER: true
      OAUTH2_PROXY_PASS_ACCESS_TOKEN: true
      OAUTH2_PROXY_SET_XAUTHREQUEST: true
      OAUTH2_PROXY_SKIP_AUTH_REGEX: "^/auth/"
      OAUTH2_PROXY_AUTH_LOGGING: true
      OAUTH2_PROXY_PASS_USER_HEADERS: true

    networks:
      - private

  st2web:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2web:${ST2_VERSION:-latest}
    restart: on-failure
    environment:
      ST2_AUTH_URL: ${ST2_AUTH_URL:-http://st2auth:9100}
      ST2_API_URL: ${ST2_API_URL:-http://st2api:9101/}
      ST2_STREAM_URL: ${ST2_STREAM_URL:-http://st2stream:9102/}
      ST2WEB_HTTPS: ${ST2WEB_HTTPS:-0}
    depends_on:
      - st2auth
      - st2api
      - st2stream
    healthcheck:
      test: ["CMD", "/st2web-healthcheck.sh"]
      interval: 30s
      timeout: 1s
      retries: 1
    volumes:
      - ./files/st2web/auth.html:/opt/stackstorm/static/webui/auth.html
      - ./files/st2web/st2-http.template:/etc/nginx/conf.d/st2-http.template
      - ./files/st2web/st2-https.template:/etc/nginx/conf.d/st2-https.template
      - ./scripts/st2web-healthcheck.sh:/st2web-healthcheck.sh
      # If you want to use a custom st2web config, edit ./files/config.js accordingly and
      # uncomment the line below
      #- ./files/config.js:/opt/stackstorm/static/webui/config.js:ro
    # ports:
      # - "${ST2_EXPOSE_HTTP:-127.0.0.1:80}:80"
      # - "${ST2_EXPOSE_HTTPS:-127.0.0.1:443}:443"
      # more work would be needed with certificate generate to make https work.
    networks:
      - private
      - public
  st2makesecrets:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2actionrunner:${ST2_VERSION:-latest}
    restart: on-failure
    networks:
      - private
    volumes:
      - ./scripts/makesecrets.sh:/makesecrets.sh
      - stackstorm-keys:/etc/st2/keys:rw
    command: /makesecrets.sh
  st2api:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2api:${ST2_VERSION:-latest}
    restart: on-failure
    depends_on:
      - mongo
      - rabbitmq
      - redis
      - st2makesecrets
    networks:
      - private
    environment:
      ST2_AUTH_URL: ${ST2_AUTH_URL:-http://st2auth:9100/}
      ST2_API_URL: ${ST2_API_URL:-http://st2api:9101/}
      ST2_STREAM_URL: ${ST2_STREAM_URL:-http://st2stream:9102/}
    volumes:
      - ./files/st2.docker.conf:/etc/st2/st2.docker.conf:ro
      - ./files/st2.user.conf:/etc/st2/st2.user.conf:ro
      - stackstorm-keys:/etc/st2/keys:ro
      - stackstorm-packs-configs:/opt/stackstorm/configs:rw
      - stackstorm-packs:/opt/stackstorm/packs:rw
      - ./files/rbac:/opt/stackstorm/rbac:rw
      - ${ST2_PACKS_DEV:-./packs.dev}:/opt/stackstorm/packs.dev:rw
  st2stream:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2stream:${ST2_VERSION:-latest}
    restart: on-failure
    depends_on:
      - st2api
    networks:
      - private
    volumes:
      - ./files/st2.docker.conf:/etc/st2/st2.docker.conf:ro
      - ./files/st2.user.conf:/etc/st2/st2.user.conf:ro
  st2scheduler:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2scheduler:${ST2_VERSION:-latest}
    restart: on-failure
    depends_on:
      - redis
      - st2api
    networks:
      - private
    volumes:
      - ./files/st2.docker.conf:/etc/st2/st2.docker.conf:ro
      - ./files/st2.user.conf:/etc/st2/st2.user.conf:ro
  st2workflowengine:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2workflowengine:${ST2_VERSION:-latest}
    restart: on-failure
    depends_on:
      - redis
      - st2api
    networks:
      - private
    volumes:
      - ./files/st2.docker.conf:/etc/st2/st2.docker.conf:ro
      - ./files/st2.user.conf:/etc/st2/st2.user.conf:ro
      - stackstorm-keys:/etc/st2/keys:ro
  st2auth:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2auth:${ST2_VERSION:-latest}
    restart: on-failure
    depends_on:
      - st2api
    networks:
      - private
    volumes:
      - ./files/st2.docker.conf:/etc/st2/st2.docker.conf:ro
      - ./files/st2.user.conf:/etc/st2/st2.user.conf:ro
      - ./files/htpasswd:/etc/st2/htpasswd:ro
  st2actionrunner:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2actionrunner:${ST2_VERSION:-latest}
    restart: on-failure
    depends_on:
      - redis
      - st2api
    networks:
      - private
    volumes:
      - ./files/st2.docker.conf:/etc/st2/st2.docker.conf:ro
      - ./files/st2.user.conf:/etc/st2/st2.user.conf:ro
      - ./files/secrets/clouds.yaml:/etc/openstack/clouds.yaml
      - stackstorm-packs-configs:/opt/stackstorm/configs:rw
      - stackstorm-packs:/opt/stackstorm/packs:rw
      - ${ST2_PACKS_DEV:-./packs.dev}:/opt/stackstorm/packs.dev:rw
      - stackstorm-virtualenvs:/opt/stackstorm/virtualenvs:rw
      - stackstorm-ssh:/home/stanley/.ssh
      # Action runner needs access to keys since action definitions (Jinja
      # templates) can reference secrets
      - stackstorm-keys:/etc/st2/keys:ro
  st2garbagecollector:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2garbagecollector:${ST2_VERSION:-latest}
    restart: on-failure
    depends_on:
      - st2api
    networks:
      - private
    volumes:
      - ./files/st2.docker.conf:/etc/st2/st2.docker.conf:ro
      - ./files/st2.user.conf:/etc/st2/st2.user.conf:ro
  st2notifier:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2notifier:${ST2_VERSION:-latest}
    restart: on-failure
    depends_on:
      - redis
      - st2api
    networks:
      - private
    volumes:
      - ./files/st2.docker.conf:/etc/st2/st2.docker.conf:ro
      - ./files/st2.user.conf:/etc/st2/st2.user.conf:ro
  st2rulesengine:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2rulesengine:${ST2_VERSION:-latest}
    restart: on-failure
    depends_on:
      - st2api
    networks:
      - private
    volumes:
      - ./files/st2.docker.conf:/etc/st2/st2.docker.conf:ro
      - ./files/st2.user.conf:/etc/st2/st2.user.conf:ro
  st2sensorcontainer:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2sensorcontainer:${ST2_VERSION:-latest}
    restart: on-failure
    depends_on:
      - st2api
    networks:
      - private
    volumes:
      - ./files/st2.docker.conf:/etc/st2/st2.docker.conf:ro
      - ./files/st2.user.conf:/etc/st2/st2.user.conf:ro
      - ./files/secrets/clouds.yaml:/etc/openstack/clouds.yaml
      - stackstorm-virtualenvs:/opt/stackstorm/virtualenvs:rw
      - stackstorm-packs:/opt/stackstorm/packs:rw
      - stackstorm-packs-configs:/opt/stackstorm/configs:rw
      - ${ST2_PACKS_DEV:-./packs.dev}:/opt/stackstorm/packs.dev:rw
  st2timersengine:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2timersengine:${ST2_VERSION:-latest}
    restart: on-failure
    depends_on:
      - st2api
    networks:
      - private
    volumes:
      - ./files/st2.docker.conf:/etc/st2/st2.docker.conf:ro
  st2client:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2actionrunner:${ST2_VERSION:-latest}
    restart: on-failure
    depends_on:
      - st2auth
      - st2api
      - st2stream
    command: /st2client-startup.sh; st2 pack install https://github.com/stfc/st2-cloud-pack=main
    networks:
      - private
    environment:
      ST2CLIENT: 1
      ST2_AUTH_URL: ${ST2_AUTH_URL:-http://st2auth:9100/}
      ST2_API_URL: ${ST2_API_URL:-http://st2api:9101/}
      ST2_STREAM_URL: ${ST2_STREAM_URL:-http://st2stream:9102/}
      TZ: ${TZ:-UTC}
    volumes:
      - ./files/st2.docker.conf:/etc/st2/st2.docker.conf:ro
      - ./files/st2.user.conf:/etc/st2/st2.user.conf:ro
      # Technically, client container doesn't need or should have access to the
      # keys in prod setup, but here we make it available to end user for
      # testing and transparency reasons since this setup is primarily mean to
      # be used for testing and development.
      - stackstorm-keys:/etc/st2/keys:ro
      - stackstorm-packs-configs:/opt/stackstorm/configs:rw
      - stackstorm-packs:/opt/stackstorm/packs:rw
      - ./files/rbac:/opt/stackstorm/rbac:rw
      - ${ST2_PACKS_DEV:-./packs.dev}:/opt/stackstorm/packs.dev:rw
      - ./files/st2-cli.conf:/root/.st2/config
      - ./scripts/st2client-startup.sh:/st2client-startup.sh
  st2chatops:
    image: ${ST2_IMAGE_REPO:-stackstorm/}st2chatops:${ST2_VERSION:-latest}
    restart: on-failure:5
    depends_on:
      - st2api
      - st2auth
      - st2stream
    command: /st2chatops-startup.sh
    networks:
      - private
    environment:
      ST2_AUTH_URL: ${ST2_AUTH_URL:-http://st2auth:9100/}
      ST2_API_URL: ${ST2_API_URL:-http://st2api:9101/}
      ST2_STREAM_URL: ${ST2_STREAM_URL:-http://st2stream:9102/}
      ST2_API_KEY: ${ST2_API_KEY:-change-to-your-st2-api-key}
      TZ: ${TZ:-UTC}
      # enable chatops by setting this variable to any non-zero value
      # and enable/set your hubot adapter specific variables below
      ST2_CHATOPS_ENABLE: ${ST2_CHATOPS_ENABLE:-0}
      # Custom hubot adapter ENV variables to pass through which will override st2chatops.env defaults.
      # See https://github.com/StackStorm/st2chatops/blob/master/st2chatops.env
      # for the full list of supported adapters and example ENV variables.
      HUBOT_ADAPTER: ${HUBOT_ADAPTER:-slack}
      HUBOT_LOG_LEVEL: ${HUBOT_LOG_LEVEL:-debug}
      HUBOT_SLACK_TOKEN: ${HUBOT_SLACK_TOKEN:-}
    volumes:
      - ./scripts/st2chatops-startup.sh:/st2chatops-startup.sh
  # external services
  mongo:
    image: mongo:4.4
    restart: on-failure
    networks:
      - private
    volumes:
      - stackstorm-mongodb:/data/db
  rabbitmq:
    image: rabbitmq:3.12
    restart: on-failure
    networks:
      - private
    volumes:
      - stackstorm-rabbitmq:/var/lib/rabbitmq
  redis:
    image: redis:7.2
    restart: on-failure
    networks:
      - private
    volumes:
      - stackstorm-redis:/data

volumes:
    stackstorm-mongodb:
    stackstorm-rabbitmq:
    stackstorm-redis:
    stackstorm-packs:
    stackstorm-packs-configs:
    stackstorm-keys:
    stackstorm-virtualenvs:
    stackstorm-ssh:

networks:
  public:
    driver: bridge
  private:
    driver: bridge